!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?factory(exports,require("@angular/core"),require("rxjs/Observable"),require("@angular/http"),require("rxjs/add/operator/map"),require("rxjs/add/operator/catch"),require("@angular/common")):"function"==typeof define&&define.amd?define(["exports","@angular/core","rxjs/Observable","@angular/http","rxjs/add/operator/map","rxjs/add/operator/catch","@angular/common"],factory):factory((global.ng=global.ng||{},global.ng.ngxLeafletComponents={}),global.ng.core,global.Rx,global.ng.http,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.common)}(this,function(exports,core,Observable,http,map,_catch,common){"use strict";function __extends(d,b){function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])},MapService=function(){function MapService(){this.basemaps={},this.overlays={},this.layerControlflag=!1,this.layersInControlNumber=0,this.layerControlObject={},this.groupIdentifiers=[],this.groupNames=[]}return MapService.prototype.setMap=function(map$$1){this.map=map$$1},MapService.prototype.getMap=function(){return this.map},MapService.prototype.setLayerControl=function(state){this.layerControlflag=state},MapService.prototype.getLayerControl=function(){return this.layerControlflag},MapService.prototype.addBasemap=function(basemap,name){""===name&&(name="unknown layer"),void 0===this.basemaps[name]?this.basemaps[name]=basemap:(name=this.getUniqueName(name),this.addBasemap(basemap,name))},MapService.prototype.getUniqueName=function(name){var nameindex=0,newName=name;return-1!==name.indexOf("(")?(nameindex=parseInt(name.split("(")[1].split(")")[0]),nameindex+=1,newName=name.split("(")[0]):nameindex=1,name=newName+"("+nameindex+")"},MapService.prototype.addOverlay=function(overlay,name,gId){if(-1!==this.groupIdentifiers.indexOf(gId)){var index=this.groupIdentifiers.indexOf(gId),existing_name=this.groupNames[index];this.overlays[existing_name]=overlay}else""===name&&(name="unknown group"),void 0===this.overlays[name]?(this.groupNames.push(name),this.groupIdentifiers.push(gId),this.overlays[name]=overlay):(name=this.getUniqueName(name),-1===this.groupNames.indexOf(name)?(this.groupNames.push(name),this.groupIdentifiers.push(gId)):this.addOverlay(overlay,name));this.addControl()},MapService.prototype.getBasemaps=function(){return this.basemaps},MapService.prototype.getOverlays=function(){return this.overlays},MapService.prototype.getObservableOverlays=function(){var _this=this;return Observable.Observable.create(function(observer){observer.next(_this.overlays),observer.complete()})},MapService.prototype.getObservableBasemaps=function(){var _this=this;return Observable.Observable.create(function(observer){observer.next(_this.basemaps),observer.complete()})},MapService.prototype.refreshOverlays=function(remove,add){var overlays=this.getOverlays();for(var key in overlays)overlays[key]instanceof Array&&overlays[key].forEach(function(element,index,arr){element._leaflet_id==remove._leaflet_id&&(arr[index]=add)})},MapService.prototype.increaseNumber=function(){this.layersInControlNumber+=1},MapService.prototype.getLayerNumber=function(){return this.layersInControlNumber},MapService.prototype.addControl=function(){if(this.layerControlflag){var map$$1=this.getMap();0!==Object.keys(this.layerControlObject).length&&(this.layerControlObject.getContainer().innerHTML="",map$$1.removeControl(this.layerControlObject)),this.layerControlObject=L.control.layers(this.getBasemaps(),this.getOverlays()).addTo(map$$1)}},MapService.decorators=[{type:core.Injectable}],MapService.ctorParameters=function(){return[]},MapService}(),CoordinateHandler=function(){function CoordinateHandler(){}return CoordinateHandler.prototype.assignCartesianPointToLeafletsLatLngSchema=function(){void 0!==this.x&&(this.lon=this.x),void 0!==this.y&&(this.lat=this.y)},CoordinateHandler.prototype.assignCartesianArrayToLeafletsLatLngSchema=function(arr){if(void 0!==this.xys){arr||(arr=this.xys);for(var i=0;i<arr.length;i++)"number"!=typeof arr[0]?this.assignCartesianArrayToLeafletsLatLngSchema(arr[i]):arr.reverse();this.latlngs=this.xys}},CoordinateHandler.prototype.transformPointCoordinates=function(crs){if(crs.code&&"EPSG:3857"!==crs.code){newlatlng=crs.unproject({y:this.lat,x:this.lon});this.setNewLatLng(newlatlng)}else{var newlatlng={lat:this.lat,lng:this.lon};this.setNewLatLng(newlatlng)}},CoordinateHandler.prototype.setNewLatLng=function(newlatlng){this.lat=newlatlng.lat,this.lon=newlatlng.lng},CoordinateHandler.prototype.transformArrayCoordinates=function(crs,arr){arr||(arr=this.latlngs);for(var i=0;i<arr.length;i++)if("number"!=typeof arr[0])arr[i]=this.transformArrayCoordinates(crs,arr[i]);else if(crs.code&&"EPSG:3857"!==crs.code){var trasformed=crs.unproject({x:arr[0],y:arr[1]});arr={lat:trasformed.lat,lng:trasformed.lng}}else arr={lat:arr[0],lng:arr[1]};return arr},CoordinateHandler.propDecorators={lat:[{type:core.Input}],lon:[{type:core.Input}],x:[{type:core.Input}],y:[{type:core.Input}],latlngs:[{type:core.Input}],xys:[{type:core.Input}]},CoordinateHandler}(),LeafletElement=function(_super){function LeafletElement(mapService){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.lat=52.6,_this.lon=-1.1,_this.zoom=12,_this.minZoom=4,_this.maxZoom=19,_this.layerControl=!1,_this.crs=L.CRS.EPSG3857,_this.maxBounds=null,_this.layerControlObject=null,_this}return __extends(LeafletElement,_super),LeafletElement.prototype.ngOnInit=function(){if(_super.prototype.assignCartesianPointToLeafletsLatLngSchema.call(this),"string"==typeof this.crs){var splitCrs=this.crs.split(".");"L"===splitCrs[0]?this.crs=L[splitCrs[1]][splitCrs[2]]:(console.warn("something is not right, reverting to default EPSG3857"),this.crs=L.CRS.EPSG3857)}_super.prototype.transformPointCoordinates.call(this,this.crs);var map$$1=L.map(this.mapElement.nativeElement,{crs:this.crs,zoomControl:this.zoomControl,center:L.latLng(this.lat,this.lon),zoom:this.zoom,minZoom:this.minZoom,maxZoom:this.maxZoom,maxBounds:this.maxBounds,layers:[],closePopupOnClick:!1,attributionControl:!1});this.mapElement.nativeElement.myMapProperty=map$$1,this.mapService.setMap(map$$1),this.mapService.setLayerControl(this.layerControl)},LeafletElement.prototype.ngAfterViewInit=function(){},LeafletElement.prototype.setLayerControl=function(){if(this.layerControl){var map$$1=this.mapService.getMap();null!==this.layerControlObject&&(this.layerControlObject.getContainer().innerHTML=""),this.layerControlObject=L.control.layers(this.mapService.getBasemaps(),this.mapService.getOverlays()).addTo(map$$1)}},LeafletElement.decorators=[{type:core.Component,args:[{selector:"leaf-element",template:'\n  <div class="page-background map-container" layout-padding>\n\t  <div #map></div>\n  </div>',styles:[":host {width: 100%;height:100%;}:host .map-container {position: absolute;display: block;top: 0px;left: 0px;right: 0px;bottom: 0px;}leaf-element{width:100%;}.leaflet-pane {z-index: 0 !important;}.leaflet-bottom.leaflet-left {z-index: 1 !important;}"],providers:[MapService]}]}],LeafletElement.ctorParameters=function(){return[{type:MapService}]},LeafletElement.propDecorators={lat:[{type:core.Input}],lon:[{type:core.Input}],zoom:[{type:core.Input}],minZoom:[{type:core.Input}],maxZoom:[{type:core.Input}],layerControl:[{type:core.Input}],crs:[{type:core.Input}],zoomControl:[{type:core.Input}],maxBounds:[{type:core.Input}],mapElement:[{type:core.ViewChild,args:["map"]}]},LeafletElement}(CoordinateHandler),GeoJSONCoordinateHandler=function(){function GeoJSONCoordinateHandler(){this.geojson={}}return GeoJSONCoordinateHandler.prototype.transformJSONCoordinates=function(geoJSON,crs){var _this=this;if("FeatureCollection"===geoJSON.type&&geoJSON.features.forEach(function(feature){_this.transformJSONCoordinates(feature,crs)}),"Feature"===geoJSON.type){var feature=geoJSON;this.transformJSONCoordinates(feature.geometry,crs)}if("Point"===geoJSON.type){var point=geoJSON;point=this.transformPointCoordinates(point.coordinates,crs)}"LineString"===geoJSON.type&&geoJSON.coordinates.forEach(function(point){_this.transformPointCoordinates(point,crs)}),"MultiPoint"===geoJSON.type&&geoJSON.coordinates.forEach(function(point){_this.transformPointCoordinates(point,crs)}),"Polygon"===geoJSON.type&&geoJSON.coordinates.forEach(function(polygonElement){polygonElement.forEach(function(point){_this.transformPointCoordinates(point,crs)})}),"MultiLineString"===geoJSON.type&&geoJSON.coordinates.forEach(function(lineString){lineString.forEach(function(point){_this.transformPointCoordinates(point,crs)})}),"MultiPolygon"===geoJSON.type&&geoJSON.coordinates.forEach(function(polygon){polygon.forEach(function(polygonElement){polygonElement.forEach(function(point){_this.transformPointCoordinates(point,crs)})})}),"GeometryCollection"===geoJSON.type&&geoJSON.geometries.forEach(function(geometry){_this.transformJSONCoordinates(geometry,crs)})},GeoJSONCoordinateHandler.prototype.transformPointCoordinates=function(point,crs){if(crs.code&&"EPSG:3857"!==crs.code){var newlatlng=crs.unproject({x:point[0],y:point[1]});return point[1]=newlatlng.lat,point[0]=newlatlng.lng,point}return point},GeoJSONCoordinateHandler.propDecorators={geojson:[{type:core.Input}]},GeoJSONCoordinateHandler}(),attributionModel=function(){return function(options){if(this.prefix="Leaflet",this.position="bottomright",null!==options)for(var key in options)void 0!==options[key]&&(this[key]=options[key])}}(),AttributionControl=function(){function AttributionControl(mapService,LeafletElement$$1){this.mapService=mapService,this.LeafletElement=LeafletElement$$1,this.Options=new attributionModel(null)}return AttributionControl.prototype.ngOnInit=function(){if(this.LeafletElement){var map$$1=this.mapService.getMap();L.control.attribution(this.Options).addTo(map$$1)}else console.warn("This attribution-control will not be rendered \n the expected parent node of attribution-control should be either leaf-element or layer-element")},AttributionControl.decorators=[{type:core.Component,args:[{selector:"attribution-control",template:"",styles:[""]}]}],AttributionControl.ctorParameters=function(){return[{type:MapService},{type:LeafletElement,decorators:[{type:core.Optional}]}]},AttributionControl.propDecorators={Options:[{type:core.Input}]},AttributionControl}(),scaleModel=function(){return function(options){this.maxWidth=100,this.metric=!0,this.imperial=!0,this.updateWhenIdle=!0,this.position="bottomleft";var source=options,copy=this;if(null!==source)for(var key in source)void 0!==source[key]&&(copy[key]=source[key])}}(),ScaleControl=function(){function ScaleControl(mapService,LeafletElement$$1){this.mapService=mapService,this.LeafletElement=LeafletElement$$1,this.Options=new scaleModel(null)}return ScaleControl.prototype.ngOnInit=function(){if(this.LeafletElement){var map$$1=this.mapService.getMap();L.control.scale(this.Options).addTo(map$$1)}else console.warn("This scale-control will not be rendered \n the expected parent node of scale-control should be leaf-element")},ScaleControl.decorators=[{type:core.Component,args:[{selector:"scale-control",template:"",styles:[""]}]}],ScaleControl.ctorParameters=function(){return[{type:MapService},{type:LeafletElement,decorators:[{type:core.Optional}]}]},ScaleControl.propDecorators={Options:[{type:core.Input}]},ScaleControl}(),zoomModel=function(){return function(options){this.zoomInText="+",this.zoomInTitle="Zoom in",this.zoomOutText="-",this.zoomOutTitle="Zoom out",this.position="topright";var source=options,copy=this;if(null!==source)for(var key in source)void 0!==source[key]&&(copy[key]=source[key])}}(),ZoomControl=function(){function ZoomControl(mapService,LeafletElement$$1){this.mapService=mapService,this.LeafletElement=LeafletElement$$1,this.Options=new zoomModel(null)}return ZoomControl.prototype.ngOnInit=function(){if(this.LeafletElement){var map$$1=this.mapService.getMap();L.control.zoom(this.Options).addTo(map$$1)}else console.warn("This zoom-control will not be rendered \n the expected parent node of zoom-control should be leaf-element")},ZoomControl.decorators=[{type:core.Component,args:[{selector:"zoom-control",template:"",styles:[""]}]}],ZoomControl.ctorParameters=function(){return[{type:MapService},{type:LeafletElement,decorators:[{type:core.Optional}]}]},ZoomControl.propDecorators={Options:[{type:core.Input}]},ZoomControl}(),WatermarkControl=function(){function WatermarkControl(mapService,LeafletElement$$1){this.mapService=mapService,this.LeafletElement=LeafletElement$$1}return WatermarkControl.prototype.ngOnInit=function(){var self=this;if(this.LeafletElement){var map$$1=this.mapService.getMap();this.url&&(L.Control.Watermark={},L.Control.Watermark=L.Control.extend({onAdd:function(map$$1){var basediv=L.DomUtil.create("div","watermark"),numberOfLogo=Math.ceil(map$$1.getSize().x/self.imagewidth)*Math.ceil(map$$1.getSize().y/self.imageheight);console.log(numberOfLogo);var i=0;for(i;i<numberOfLogo;i++){var img=L.DomUtil.create("img","watermark-elements",basediv);img.src=self.url,img.style.width=self.imagewidth+"px"}return basediv},onRemove:function(map$$1){}}),L.control.watermark=function(opts){return new L.Control.Watermark(opts)}),L.control.watermark({position:"bottomleft"}).addTo(map$$1)}},WatermarkControl.decorators=[{type:core.Component,args:[{selector:"watermark-element",template:"",styles:[""]}]}],WatermarkControl.ctorParameters=function(){return[{type:MapService},{type:LeafletElement,decorators:[{type:core.Optional}]}]},WatermarkControl.propDecorators={url:[{type:core.Input}],imagewidth:[{type:core.Input}],imageheight:[{type:core.Input}]},WatermarkControl}(),LayerElement=function(){function LayerElement(mapService){this.mapService=mapService,this.slippyLayer="",this.wmsLayer="",this.name="",this.opacity=1,this.type="overlay",this.attribution=null}return LayerElement.prototype.ngOnInit=function(){this.mapService.increaseNumber();var map$$1=this.mapService.getMap(),layer=null;""!==this.slippyLayer&&(layer=L.tileLayer(this.slippyLayer,{attribution:this.attribution})),""!==this.wmsLayer&&""!==this.name&&(layer=L.tileLayer.wms(this.wmsLayer,{layers:this.name,attribution:this.attribution}).setOpacity(this.opacity)),layer!=={}&&("overlay"===this.type?(this.mapService.addOverlay(layer,this.name),layer.addTo(map$$1)):"basemap"===this.type&&(this.mapService.addBasemap(layer,this.name),layer.addTo(map$$1)))},LayerElement.decorators=[{type:core.Component,args:[{selector:"layer-element",template:"",styles:[""]}]}],LayerElement.ctorParameters=function(){return[{type:MapService}]},LayerElement.propDecorators={slippyLayer:[{type:core.Input}],wmsLayer:[{type:core.Input}],name:[{type:core.Input}],opacity:[{type:core.Input}],type:[{type:core.Input}],attribution:[{type:core.Input}]},LayerElement}(),ImageOverlayElement=function(_super){function ImageOverlayElement(mapService,LeafletElement$$1){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.LeafletElement=LeafletElement$$1,_this.bounds=[[-26.5,-25],[1021.5,1023]],_this.imagepath="",_this.name="",_this.opacity=1,_this.type="overlay",_this}return __extends(ImageOverlayElement,_super),ImageOverlayElement.prototype.ngOnInit=function(){if(this.latlngs=this.bounds,this.LeafletElement){var map$$1=this.mapService.getMap();_super.prototype.transformArrayCoordinates.call(this,this.LeafletElement.crs);var layer=null;(layer=L.imageOverlay(this.imagepath,this.bounds).setOpacity(this.opacity))!=={}&&("overlay"===this.type?(this.mapService.addOverlay(layer,this.name),layer.addTo(map$$1)):"basemap"===this.type&&this.mapService.addBasemap(layer,this.name))}},ImageOverlayElement.decorators=[{type:core.Component,args:[{selector:"image-overlay-element",template:"",styles:[""]}]}],ImageOverlayElement.ctorParameters=function(){return[{type:MapService},{type:LeafletElement,decorators:[{type:core.Optional}]}]},ImageOverlayElement.propDecorators={bounds:[{type:core.Input}],imagepath:[{type:core.Input}],name:[{type:core.Input}],opacity:[{type:core.Input}],type:[{type:core.Input}]},ImageOverlayElement}(CoordinateHandler),GuidService=function(){function GuidService(){}return GuidService.prototype.newGuid=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(c){var r=16*Math.random()|0;return("x"==c?r:3&r|8).toString(16)})},GuidService.decorators=[{type:core.Injectable}],GuidService.ctorParameters=function(){return[]},GuidService}(),GroupService=function(){function GroupService(guidService){this.guidService=guidService,this.layerGroup=[],this.layerId=[],this.layerGroupNumber=0,this.group={}}return GroupService.prototype.addOLayersToGroup=function(overlay,map$$1,mapService,group,replace,gId){void 0===replace&&(replace=!1),gId||(gId=this.guidService.newGuid()),-1===this.layerId.indexOf(gId)&&this.layerId.push(gId),0!==Object.keys(this.group).length&&(replace?(map$$1.removeLayer(this.group),-1!==this.layerId.indexOf(gId)?this.layerGroup[this.layerId.indexOf(gId)]=overlay:this.layerGroup.push(overlay),this.group=L.layerGroup(this.getLayerGroup()),this.group.addTo(map$$1)):(this.layerGroup.push(overlay),this.group.addLayer(overlay))),replace||(this.layerGroup.push(overlay),this.group=L.layerGroup(this.getLayerGroup()),this.group.addTo(map$$1)),mapService.addOverlay(this.getGroup(),group.name,group.globalId)},GroupService.prototype.getObservableGroup=function(){var _this=this;return Observable.Observable.create(function(observer){var group=_this.getGroup();observer.next(group),observer.complete()})},GroupService.prototype.getGroup=function(){return this.group},GroupService.prototype.getLayerGroup=function(){return this.layerGroup},GroupService.prototype.getLayerNumber=function(){return this.layerGroupNumber},GroupService.decorators=[{type:core.Injectable}],GroupService.ctorParameters=function(){return[{type:GuidService}]},GroupService}(),PopupService=function(){function PopupService(){}return PopupService.prototype.enablePopup=function(mouseover,onclick,element,text){mouseover&&onclick&&(mouseover=void 0,console.warn("you can not use mouseover and onclick at the same time, mouseover is going to be depressed")),mouseover&&("true"===mouseover&&text?mouseover=text:!0!==mouseover||text||(mouseover="true"),element.bindPopup(mouseover),element.on("mouseover",function(){this.openPopup()}).on("mouseout",function(){this.closePopup()})),onclick&&("true"===onclick&&text?onclick=text:!0!==onclick||text||(onclick="true"),element.bindPopup(onclick),element.on("click",function(){this.openPopup()})),mouseover||onclick||!text||(element.bindPopup(text),element.on("mouseover",function(){this.openPopup()}).on("mouseout",function(){this.closePopup()}))},PopupService.decorators=[{type:core.Injectable}],PopupService.ctorParameters=function(){return[]},PopupService}(),LeafletGroup=function(){function LeafletGroup(mapService,groupService,guidService){this.mapService=mapService,this.groupService=groupService,this.guidService=guidService,this.name="",this.globalId=this.guidService.newGuid()}return LeafletGroup.prototype.ngOnInit=function(){},LeafletGroup.prototype.ngAfterViewInit=function(){},LeafletGroup.decorators=[{type:core.Component,args:[{selector:"leaflet-group",template:"",styles:[""],providers:[GroupService]}]}],LeafletGroup.ctorParameters=function(){return[{type:MapService},{type:GroupService},{type:GuidService}]},LeafletGroup.propDecorators={name:[{type:core.Input}]},LeafletGroup}(),MarkerElement=function(_super){function MarkerElement(mapService,popupService,http$$1,groupService,LeafletElement$$1,LeafletGroup$$1){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.popupService=popupService,_this.http=http$$1,_this.groupService=groupService,_this.LeafletElement=LeafletElement$$1,_this.LeafletGroup=LeafletGroup$$1,_this.lat=52.6,_this.lon=-1.1,_this.mouseover=void 0,_this.onclick=void 0,_this.iconUrl="",_this.marker=null,_this}return __extends(MarkerElement,_super),MarkerElement.prototype.ngOnInit=function(){_super.prototype.assignCartesianPointToLeafletsLatLngSchema.call(this);var model=this;if(this.LeafletElement||this.LeafletGroup){var map_1=this.mapService.getMap();_super.prototype.transformPointCoordinates.call(this,this.LeafletElement.crs),""===this.iconUrl?(this.marker=L.marker([this.lat,this.lon]),this.createMarkerlayer(this.marker,map_1)):this.imageExists(this.iconUrl,function(exists){model.getImage().subscribe(function(image){var img=document.createElement("img");window.URL.createObjectURL(image.blob());var reader=new FileReader;reader.onload=function(){img.src=reader.result;var obj={icon:L.icon({iconUrl:model.iconUrl,iconSize:[img.width,img.height],iconAnchor:[img.width/2,img.height-1],popupAnchor:[0,-img.height]}),options:null};model.marker=L.marker([model.lat,model.lon],obj),model.createMarkerlayer(model.marker,map_1)},reader.readAsDataURL(image.blob())},function(err){console.log(err)})})}else console.warn("This marker-element will not be rendered \n the expected parent node of marker-element should be either leaf-element or leaflet-group")},MarkerElement.prototype.createMarkerlayer=function(marker,map$$1){var textInput=void 0;this.ngEl.nativeElement.childNodes.length>0&&(textInput=this.ngEl.nativeElement.childNodes[0].nodeValue),void 0===this.mouseover&&void 0===this.onclick&&void 0===textInput||this.popupService.enablePopup(this.mouseover,this.onclick,this.marker,textInput),this.LeafletGroup?this.groupService.addOLayersToGroup(marker,map$$1,this.mapService,this.LeafletGroup):marker.addTo(map$$1)},MarkerElement.prototype.imageExists=function(url,callback){var img=new Image;img.onload=function(){callback(!0)},img.onerror=function(){callback(!1)},img.src=url},MarkerElement.prototype.getImage=function(){var headers=new http.Headers({"Content-Type":"application/x-www-form-urlencoded"}),options=new http.RequestOptions({responseType:http.ResponseContentType.Blob,headers:headers});return this.http.get(this.iconUrl,options).map(function(res){return res}).catch(function(error){return Observable.Observable.throw("Server error")})},MarkerElement.decorators=[{type:core.Component,args:[{selector:"marker-element",template:"<div #ngel><ng-content></ng-content></div>",styles:[""],providers:[PopupService]}]}],MarkerElement.ctorParameters=function(){return[{type:MapService},{type:PopupService},{type:http.Http},{type:GroupService,decorators:[{type:core.Optional}]},{type:LeafletElement,decorators:[{type:core.Optional}]},{type:LeafletGroup,decorators:[{type:core.Optional}]}]},MarkerElement.propDecorators={lat:[{type:core.Input}],lon:[{type:core.Input}],mouseover:[{type:core.Input}],onclick:[{type:core.Input}],iconUrl:[{type:core.Input}],ngEl:[{type:core.ViewChild,args:["ngel"]}]},MarkerElement}(CoordinateHandler),path=function(){return function(pathInfo){this.stroke=!0,this.color="#3388ff",this.weight=3,this.opacity=1,this.lineCap="round",this.lineJoin="round",this.dashArray=null,this.dashOffset=null,this.fill=!0,this.fillColor="#3388ff",this.fillOpacity=.2,this.fillRule="evenodd",this.className=null;var source=pathInfo,copy=this;if(null!==source)for(var key in source)void 0!==source[key]&&(copy[key]=source[key])}}(),CircleElement=function(_super){function CircleElement(mapService,popupService,groupService,LeafletElement$$1,LeafletGroup$$1){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.popupService=popupService,_this.groupService=groupService,_this.LeafletElement=LeafletElement$$1,_this.LeafletGroup=LeafletGroup$$1,_this.lat=52.6,_this.lon=-1.1,_this.radius=20,_this.mouseover=void 0,_this.onclick=void 0,_this.Options=new path(null),_this.circle=null,_this}return __extends(CircleElement,_super),CircleElement.prototype.ngOnInit=function(){if(_super.prototype.assignCartesianPointToLeafletsLatLngSchema.call(this),this.LeafletElement||this.LeafletGroup){var inheritedOptions=new path(this.Options),map$$1=this.mapService.getMap();_super.prototype.transformPointCoordinates.call(this,this.LeafletElement.crs),this.circle=L.circle([this.lat,this.lon],this.radius,inheritedOptions),this.LeafletGroup?this.groupService.addOLayersToGroup(this.circle,map$$1,this.mapService,this.LeafletGroup):this.circle.addTo(map$$1)}else console.warn("This circle-element will not be rendered \n the expected parent node of circle-element should be either leaf-element or leaflet-group")},CircleElement.prototype.ngAfterViewInit=function(){if(this.LeafletElement||this.LeafletGroup){var textInput=void 0;this.ngEl.nativeElement.childNodes.length>0&&(textInput=this.ngEl.nativeElement.childNodes[0].nodeValue),void 0===this.mouseover&&void 0===this.onclick&&void 0===textInput||this.popupService.enablePopup(this.mouseover,this.onclick,this.circle,textInput)}},CircleElement.decorators=[{type:core.Component,args:[{selector:"circle-element",template:"<div #ngel><ng-content></ng-content></div>",styles:[""]}]}],CircleElement.ctorParameters=function(){return[{type:MapService},{type:PopupService},{type:GroupService,decorators:[{type:core.Optional}]},{type:LeafletElement,decorators:[{type:core.Optional}]},{type:LeafletGroup,decorators:[{type:core.Optional}]}]},CircleElement.propDecorators={lat:[{type:core.Input}],lon:[{type:core.Input}],radius:[{type:core.Input}],mouseover:[{type:core.Input}],onclick:[{type:core.Input}],Options:[{type:core.Input}],ngEl:[{type:core.ViewChild,args:["ngel"]}]},CircleElement}(CoordinateHandler),CircleMarkerElement=function(_super){function CircleMarkerElement(mapService,popupService,groupService,LeafletElement$$1,LeafletGroup$$1){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.popupService=popupService,_this.groupService=groupService,_this.LeafletElement=LeafletElement$$1,_this.LeafletGroup=LeafletGroup$$1,_this.lat=52.6,_this.lon=-1.1,_this.mouseover=void 0,_this.onclick=void 0,_this.Options=new path(null),_this.circle=null,_this}return __extends(CircleMarkerElement,_super),CircleMarkerElement.prototype.ngOnInit=function(){if(_super.prototype.assignCartesianPointToLeafletsLatLngSchema.call(this),this.LeafletElement||this.LeafletGroup){var inheritedOptions=new path(this.Options),map$$1=this.mapService.getMap();_super.prototype.transformPointCoordinates.call(this,this.LeafletElement.crs);this.circle=L.circleMarker([this.lat,this.lon],inheritedOptions),this.LeafletGroup?this.groupService.addOLayersToGroup(this.circle,map$$1,this.mapService,this.LeafletGroup):this.circle.addTo(map$$1)}else console.warn("This circle-element will not be rendered \n the expected parent node of circle-element should be either leaf-element or leaflet-group")},CircleMarkerElement.prototype.ngAfterViewInit=function(){var textInput=void 0;this.ngEl.nativeElement.childNodes.length>0&&(textInput=this.ngEl.nativeElement.childNodes[0].nodeValue),void 0===this.mouseover&&void 0===this.onclick&&void 0===textInput||this.popupService.enablePopup(this.mouseover,this.onclick,this.circle,textInput)},CircleMarkerElement.decorators=[{type:core.Component,args:[{selector:"circle-marker-element",template:"<div #ngel><ng-content></ng-content></div>",styles:[""]}]}],CircleMarkerElement.ctorParameters=function(){return[{type:MapService},{type:PopupService},{type:GroupService,decorators:[{type:core.Optional}]},{type:LeafletElement,decorators:[{type:core.Optional}]},{type:LeafletGroup,decorators:[{type:core.Optional}]}]},CircleMarkerElement.propDecorators={lat:[{type:core.Input}],lon:[{type:core.Input}],mouseover:[{type:core.Input}],onclick:[{type:core.Input}],Options:[{type:core.Input}],ngEl:[{type:core.ViewChild,args:["ngel"]}]},CircleMarkerElement}(CoordinateHandler),HelperService=function(){function HelperService(){}return HelperService.prototype.arrayCompare=function(a,b){if(a.length!=b.length)return!1;for(var i in a)if(a[i]instanceof Array&&b[i]instanceof Array){if(!this.arrayCompare(a[i],b[i]))return!1}else if(a[i]!=b[i])return!1;return!0},HelperService.decorators=[{type:core.Injectable}],HelperService.ctorParameters=function(){return[]},HelperService}(),PolygonElement=function(_super){function PolygonElement(mapService,popupService,guidService,helperService,groupService,LeafletElement$$1,LeafletGroup$$1){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.popupService=popupService,_this.guidService=guidService,_this.helperService=helperService,_this.groupService=groupService,_this.LeafletElement=LeafletElement$$1,_this.LeafletGroup=LeafletGroup$$1,_this.latlngs=[[[52.65,-1.2],[52.645,-1.15],[52.696,-1.155],[52.697,-1.189]],[[52.66,-1.19],[52.665,-1.16],[52.686,-1.161],[52.687,-1.179]]],_this.Options=new path(null),_this.mouseover=void 0,_this.onclick=void 0,_this.polygon=null,_this.originalObject=_this.latlngs.slice(),_this.globalId=_this.guidService.newGuid(),_this}return __extends(PolygonElement,_super),PolygonElement.prototype.ngOnInit=function(){if(_super.prototype.assignCartesianArrayToLeafletsLatLngSchema.call(this),this.LeafletElement||this.LeafletGroup){var inheritedOptions=new path(this.Options),map$$1=this.mapService.getMap();_super.prototype.transformArrayCoordinates.call(this,this.LeafletElement.crs),this.polygon=L.polygon([this.latlngs],inheritedOptions),this.LeafletGroup?this.groupService.addOLayersToGroup(this.polygon,map$$1,this.mapService,this.LeafletGroup,!1,this.globalId):this.polygon.addTo(map$$1)}else console.warn("This polygon-element will not be rendered \n the expected parent node of polygon-element should be either leaf-element or leaflet-group")},PolygonElement.prototype.ngAfterViewInit=function(){var textInput=void 0;this.ngEl.nativeElement.childNodes.length>0&&(textInput=this.ngEl.nativeElement.childNodes[0].nodeValue),void 0===this.mouseover&&void 0===this.onclick&&void 0===textInput||this.popupService.enablePopup(this.mouseover,this.onclick,this.polygon,textInput)},PolygonElement.prototype.ngDoCheck=function(){var map$$1=this.mapService.getMap();if(!this.helperService.arrayCompare(this.originalObject,this.latlngs)){this.originalObject=this.latlngs.slice();var inheritedOptions=new path(this.Options);this.LeafletGroup?(this.polygon=L.polygon([this.latlngs],inheritedOptions),this.groupService.addOLayersToGroup(this.polygon,map$$1,this.mapService,this.LeafletGroup,!0,this.globalId)):(map$$1.removeLayer(this.polygon),this.polygon=L.polygon([this.latlngs],inheritedOptions),this.polygon.addTo(map$$1))}},PolygonElement.decorators=[{type:core.Component,args:[{selector:"polygon-element",template:"<div #ngel><ng-content></ng-content></div>",styles:[""]}]}],PolygonElement.ctorParameters=function(){return[{type:MapService},{type:PopupService},{type:GuidService},{type:HelperService},{type:GroupService,decorators:[{type:core.Optional}]},{type:LeafletElement,decorators:[{type:core.Optional}]},{type:LeafletGroup,decorators:[{type:core.Optional}]}]},PolygonElement.propDecorators={latlngs:[{type:core.Input}],Options:[{type:core.Input}],mouseover:[{type:core.Input}],onclick:[{type:core.Input}],ngEl:[{type:core.ViewChild,args:["ngel"]}]},PolygonElement}(CoordinateHandler),PolylineElement=function(_super){function PolylineElement(mapService,popupService,guidService,helperService,groupService,LeafletElement$$1,LeafletGroup$$1){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.popupService=popupService,_this.guidService=guidService,_this.helperService=helperService,_this.groupService=groupService,_this.LeafletElement=LeafletElement$$1,_this.LeafletGroup=LeafletGroup$$1,_this.latlngs=[[52.6,-1.1],[52.605,-1.1],[52.606,-1.105],[52.697,-1.109]],_this.Options=new path(null),_this.mouseover=void 0,_this.onclick=void 0,_this.polyline=null,_this.originalObject=_this.latlngs.slice(),_this.globalId=_this.guidService.newGuid(),_this}return __extends(PolylineElement,_super),PolylineElement.prototype.ngOnInit=function(){if(_super.prototype.assignCartesianArrayToLeafletsLatLngSchema.call(this),this.LeafletElement||this.LeafletGroup){this.Options.fill=!1;var inheritedOptions=new path(this.Options),map$$1=this.mapService.getMap();_super.prototype.transformArrayCoordinates.call(this,this.LeafletElement.crs),this.polyline=L.polyline(this.latlngs,inheritedOptions),this.LeafletGroup?this.groupService.addOLayersToGroup(this.polyline,map$$1,this.mapService,this.LeafletGroup,!1,this.globalId):this.polyline.addTo(map$$1)}else console.warn("This polyline-element will not be rendered \n the expected parent node of polyline-element should be either leaf-element or leaflet-group")},PolylineElement.prototype.ngAfterViewInit=function(){var textInput=void 0;this.ngEl.nativeElement.childNodes.length>0&&(textInput=this.ngEl.nativeElement.childNodes[0].nodeValue),void 0===this.mouseover&&void 0===this.onclick&&void 0===textInput||this.popupService.enablePopup(this.mouseover,this.onclick,this.polyline,textInput)},PolylineElement.prototype.ngDoCheck=function(){var map$$1=this.mapService.getMap();if(!this.helperService.arrayCompare(this.originalObject,this.latlngs)){this.originalObject=this.latlngs.slice(),this.Options.fill=!1;var inheritedOptions=new path(this.Options);this.LeafletGroup?(this.polyline=L.polyline(this.latlngs,inheritedOptions),this.groupService.addOLayersToGroup(this.polyline,map$$1,this.mapService,this.LeafletGroup,!0,this.globalId)):(map$$1.removeLayer(this.polyline),this.polyline=L.polyline(this.latlngs,inheritedOptions),this.polyline.addTo(map$$1))}},PolylineElement.decorators=[{type:core.Component,args:[{selector:"polyline-element",template:"<div #ngel><ng-content></ng-content></div>",styles:[""]}]}],PolylineElement.ctorParameters=function(){return[{type:MapService},{type:PopupService},{type:GuidService},{type:HelperService},{type:GroupService,decorators:[{type:core.Optional}]},{type:LeafletElement,decorators:[{type:core.Optional}]},{type:LeafletGroup,decorators:[{type:core.Optional}]}]},PolylineElement.propDecorators={latlngs:[{type:core.Input}],Options:[{type:core.Input}],mouseover:[{type:core.Input}],onclick:[{type:core.Input}],ngEl:[{type:core.ViewChild,args:["ngel"]}]},PolylineElement}(CoordinateHandler),GeoJsonElement=function(_super){function GeoJsonElement(mapService,popupService,guidService,helperService,groupService,LeafletElement$$1,LeafletGroup$$1){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.popupService=popupService,_this.guidService=guidService,_this.helperService=helperService,_this.groupService=groupService,_this.LeafletElement=LeafletElement$$1,_this.LeafletGroup=LeafletGroup$$1,_this.originalObject=Object.assign({},_this.geojson),_this.globalId=_this.guidService.newGuid(),_this}return __extends(GeoJsonElement,_super),GeoJsonElement.prototype.ngOnInit=function(){if(this.LeafletElement||this.LeafletGroup){var map$$1=this.mapService.getMap();if(this.geojson){_super.prototype.transformJSONCoordinates.call(this,this.geojson,this.LeafletElement.crs);var gjson=L.geoJSON(this.geojson);this.LeafletGroup?this.groupService.addOLayersToGroup(gjson,map$$1,this.mapService,this.LeafletGroup,!1,this.globalId):gjson.addTo(map$$1)}else console.warn("geojson object seems to be undefined")}else console.warn("This polyline-element will not be rendered \n the expected parent node of polyline-element should be either leaf-element or leaflet-group")},GeoJsonElement.prototype.ngDoCheck=function(){this.mapService.getMap()},GeoJsonElement.decorators=[{type:core.Component,args:[{selector:"geojson-element",template:"",styles:[""]}]}],GeoJsonElement.ctorParameters=function(){return[{type:MapService},{type:PopupService},{type:GuidService},{type:HelperService},{type:GroupService,decorators:[{type:core.Optional}]},{type:LeafletElement,decorators:[{type:core.Optional}]},{type:LeafletGroup,decorators:[{type:core.Optional}]}]},GeoJsonElement}(GeoJSONCoordinateHandler),PopupElement=function(_super){function PopupElement(mapService,groupService,LeafletElement$$1,LeafletGroup$$1){var _this=_super.call(this)||this;return _this.mapService=mapService,_this.groupService=groupService,_this.LeafletElement=LeafletElement$$1,_this.LeafletGroup=LeafletGroup$$1,_this.lat=52.6,_this.lon=-1.9,_this.content="nice popup",_this}return __extends(PopupElement,_super),PopupElement.prototype.ngOnInit=function(){if(_super.prototype.assignCartesianPointToLeafletsLatLngSchema.call(this),this.LeafletElement||this.LeafletGroup){var map$$1=this.mapService.getMap();_super.prototype.transformPointCoordinates.call(this,this.LeafletElement.crs);var popup=L.popup({autoClose:!1,keepInView:!0}).setLatLng([this.lat,this.lon]).setContent(this.content);this.LeafletGroup?this.groupService.addOLayersToGroup(popup,map$$1,this.mapService,this.LeafletGroup):popup.addTo(map$$1)}else console.warn("This popup-element will not be rendered \n the expected parent node of popup-element should be either leaf-element or leaflet-group")},PopupElement.decorators=[{type:core.Component,args:[{selector:"popup-element",template:"",styles:[""]}]}],PopupElement.ctorParameters=function(){return[{type:MapService},{type:GroupService,decorators:[{type:core.Optional}]},{type:LeafletElement,decorators:[{type:core.Optional}]},{type:LeafletGroup,decorators:[{type:core.Optional}]}]},PopupElement.propDecorators={lat:[{type:core.Input}],lon:[{type:core.Input}],content:[{type:core.Input}]},PopupElement}(CoordinateHandler),ngxLeafletModule=function(){function ngxLeafletModule(){}return ngxLeafletModule.decorators=[{type:core.NgModule,args:[{imports:[common.CommonModule,http.HttpModule],declarations:[LeafletElement,AttributionControl,ScaleControl,ZoomControl,WatermarkControl,LayerElement,ImageOverlayElement,MarkerElement,CircleElement,CircleMarkerElement,PolygonElement,PolylineElement,GeoJsonElement,PopupElement,LeafletGroup],providers:[PopupService,GuidService,HelperService],exports:[LeafletElement,AttributionControl,ScaleControl,ZoomControl,WatermarkControl,LayerElement,ImageOverlayElement,MarkerElement,CircleElement,CircleMarkerElement,PolygonElement,PolylineElement,GeoJsonElement,PopupElement,LeafletGroup]}]}],ngxLeafletModule.ctorParameters=function(){return[]},ngxLeafletModule}();exports.LeafletElement=LeafletElement,exports.CoordinateHandler=CoordinateHandler,exports.GeoJSONCoordinateHandler=GeoJSONCoordinateHandler,exports.AttributionControl=AttributionControl,exports.ScaleControl=ScaleControl,exports.ZoomControl=ZoomControl,exports.WatermarkControl=WatermarkControl,exports.LayerElement=LayerElement,exports.ImageOverlayElement=ImageOverlayElement,exports.MarkerElement=MarkerElement,exports.CircleElement=CircleElement,exports.CircleMarkerElement=CircleMarkerElement,exports.PolygonElement=PolygonElement,exports.PolylineElement=PolylineElement,exports.GeoJsonElement=GeoJsonElement,exports.PopupElement=PopupElement,exports.LeafletGroup=LeafletGroup,exports.MapService=MapService,exports.GroupService=GroupService,exports.PopupService=PopupService,exports.GuidService=GuidService,exports.HelperService=HelperService,exports.attributionModel=attributionModel,exports.path=path,exports.scaleModel=scaleModel,exports.zoomModel=zoomModel,exports.ngxLeafletModule=ngxLeafletModule,Object.defineProperty(exports,"__esModule",{value:!0})});